{"meta":{"title":"乐行僧的博客","subtitle":"","description":"","author":"lexingsen","url":"http://example.com","root":"/"},"pages":[{"title":"文章分类","date":"2020-11-29T16:23:08.000Z","updated":"2020-11-29T18:12:13.402Z","comments":true,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""},{"title":"about","date":"2020-11-29T17:10:39.000Z","updated":"2020-11-29T17:10:39.199Z","comments":true,"path":"about/index.html","permalink":"http://example.com/about/index.html","excerpt":"","text":""},{"title":"tags","date":"2020-11-29T17:10:43.000Z","updated":"2020-11-29T17:10:43.999Z","comments":true,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"break和contiue的区别","slug":"break和contiue的区别","date":"2018-01-30T05:02:37.000Z","updated":"2020-11-29T17:53:13.104Z","comments":true,"path":"2018/01/30/break和contiue的区别/","link":"","permalink":"http://example.com/2018/01/30/break%E5%92%8Ccontiue%E7%9A%84%E5%8C%BA%E5%88%AB/","excerpt":"","text":"1.continuecontinue语句形式如下： continue; continue语句用于循环结构（包括while(当型循环)、do while（直到型循环）和 for循环）， continue作为循环结构中循环体的一部分。在程序执行的过程中，一旦遇到了continue语句， 立即结束本次循环。跳过循环体中尚未执行的部分，接着进行是否继续循环的条件判断。 2.breakbreak语句的形式如下 break; break语句大多数用于switch…case..。语句的分支语句中，在程序执行的过程中，一旦遇到了 break语句，立即退出当前的switch语句。 同时，break语句可以用于循环结构中，作为循环结构中循环体的一部分。在程序执行的过程， 一旦遇到break语句，立即退出当前的循环体，接着执行循环体之后的语句。 3.continue和break的区别 通过对比break和continue语句在循环结构中的使用，不难发现，continue语句只是结束本次 循环，不在执行循环体continue后边的语句，并不是终止当前循环。而break语句是直接结束 本次循环。 下面用一个简单的例子验证一下：1.continue 123456789101112131415# include&lt;stdio.h&gt;void main()&#123; int arr[]=&#123;1,2,3,4,5&#125;; int len=sizeof(arr)/sizeof(arr[0]); for(int i=0;i&lt;len;++i) &#123; if(arr[i]==4) &#123; continue; &#125; printf(&quot;%d &quot;,arr[i]); &#125;&#125; 运行结果为: 2.break 123456789101112131415# include&lt;stdio.h&gt;void main()&#123; int arr[]=&#123;1,2,3,4,5&#125;; int len=sizeof(arr)/sizeof(arr[0]); for(int i=0;i&lt;len;++i) &#123; if(arr[i]==4) &#123; break; &#125; printf(&quot;%d &quot;,arr[i]); &#125;&#125; 运行结果为： 实际上在continue和break语句在具体程序中的使用，往往可以在较大程度上减少时间复杂度，减小程序运行时间。","categories":[],"tags":[{"name":"c","slug":"c","permalink":"http://example.com/tags/c/"}]},{"title":"震惊！三天打鱼两天筛网这样写","slug":"震惊！三天打鱼两天筛网这样写","date":"2018-01-21T10:20:17.000Z","updated":"2020-11-29T17:19:05.454Z","comments":true,"path":"2018/01/21/震惊！三天打鱼两天筛网这样写/","link":"","permalink":"http://example.com/2018/01/21/%E9%9C%87%E6%83%8A%EF%BC%81%E4%B8%89%E5%A4%A9%E6%89%93%E9%B1%BC%E4%B8%A4%E5%A4%A9%E7%AD%9B%E7%BD%91%E8%BF%99%E6%A0%B7%E5%86%99/","excerpt":"","text":"原题目：有一个人从1990年一月一日开始三天打鱼两天晒网，问他今天在干嘛？ 拿到这样的一个题目瞬间会有一点懵，但是仔细分析其中的逻辑关系，可以得到下面的思路。 首先，从1990年1月1日到今天共计多少天。 其次，如何得到今天是打渔还是晒网，可以看出三天打鱼两天晒网是一个循环，也就是是说五天为一个周期。 顺着这样的一个思路，我们开始写代码。 1.针对一个具体的日期，我们需要知道是何年何月何日。因此，在C语言中的结构题类型就可以满足定义这样一个具体日期。 1234567typedef struct &#123; int year; int month; int day;&#125;data; 2.接着我们要计算1990年1月1日到今天为止总计为多少天。考虑到要计算天数，我们要细化日期的内容。对于年，有平年和闰年之分，平年365天，闰年366天，这都是常识。对于月，定义这样的一个平年通用型的数组比较贴切。 定义长度为13且Permonth[0]=0,这样下标与月份一致，便于计算。 1int Permonth[13]=&#123;0,31,28,31,30,31,30,31,31,30,31,30,31&#125;; 如果今年刚好不是闰年，我们只要计算出这个月前今年的总天数加上这个月的天数就可以了。但是如果是闰年我们还需要继续划分，如果是二月前，同上。如果月份大于三，我们还是需要在二月天数的基础上增加一。即Permonth[2]+=1; 3.二步骤虽然略麻烦一点，但为三步骤提供了思路。C语言就是函数（function）构成的，一个大的功能往往也可以分解为多个子功能去合作完成，也正所谓模块化程序设计。这样，首先我们写一个判断平闰年的函数，在这样的一个题目里，它得到两次使用。 1234567891011121314151617181920bool is_leapyear(int year)&#123; if(year&lt;0) &#123; printf(&quot;输入错误!&quot;); &#125; else &#123; if(year%4==0&amp;&amp;year%100!=0||year%400==0)//判断为闰年核心 &#123; return true; &#125; else &#123; return false; &#125; &#125;&#125; 接下来我们写总天数的函数 123456789101112131415161718192021222324252627void countday(date *p,int *sum)//传入结构题的地址，并传入保存总天数值的地址&#123; int permonth[13]=&#123;0,31,28,31,30,31,30,31,31,30,31,30,31&#125;; int totalday=0; for(int year=1990;year&lt;p-&gt;year;++year) &#123; if(is_leapyear(p-&gt;year)) &#123; totalday+=366; &#125; else &#123; totalday+=365; &#125; &#125; if(is_leapyear(p-&gt;year)) &#123; permonth[2]+=1; &#125; for(int i=0;i&lt;p-&gt;month;++i) &#123; totalday+=permonth[i]; &#125; totalday+=p-&gt;day; *sum=totalday;&#125; 到此为止，我们就把从1990年1月1日到今天的总天数计算出来了。4.总天数计算出来后，因为三天打渔两天晒网，五天即一个循环，所以总天数对5取模。结果为4和0时，即为晒网。结果为1，2，3时，即为打渔。5.考虑程序的冗余性，输入的具体日期完全可能出现意料之外的情况，因此也需要考虑在内。 最后，附上源代码。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172# include&lt;stdio.h&gt; typedef struct &#123; int year; int day; int month;&#125;date;void init_date(date *p)&#123; p-&gt;day=0; p-&gt;month=0; p-&gt;year=0;&#125;bool is_leapyear(int year)&#123; if(year%4==0&amp;&amp;year%100!=0||year%400==0) &#123; return true; &#125; else &#123; return false; &#125;&#125;void countday(date *p,int *sum)&#123; int permonth[13]=&#123;0,31,28,31,30,31,30,31,31,30,31,30,31&#125;; int totalday=0; for(int year=1990;year&lt;p-&gt;year;++year) &#123; if(is_leapyear(p-&gt;year)) &#123; totalday+=366; &#125; else &#123; totalday+=365; &#125; &#125; if(is_leapyear(p-&gt;year)) &#123; permonth[2]+=1; &#125; for(int i=0;i&lt;p-&gt;month;++i) &#123; totalday+=permonth[i]; &#125; totalday+=p-&gt;day; *sum=totalday;&#125;int main()&#123; date l; init_date(&amp;l); printf(&quot;请输入今天是几年几月几日：\\n&quot;); scanf(&quot;%d%d%d&quot;,&amp;l.year,&amp;l.month,&amp;l.day); printf(&quot;\\n&quot;); int s; //用来接收总天数 countday(&amp;l,&amp;s); if(s%5==4||s%5==0) &#123; printf(&quot;今天晒网！&quot;); &#125; else &#123; printf(&quot;今天打渔！&quot;); &#125; &#125;","categories":[],"tags":[{"name":"C++","slug":"C","permalink":"http://example.com/tags/C/"}]}],"categories":[],"tags":[{"name":"c","slug":"c","permalink":"http://example.com/tags/c/"},{"name":"C++","slug":"C","permalink":"http://example.com/tags/C/"}]}